Welcome to the Blog API documentation! 
This API provides functionalities for managing blog posts, users, comments, and likes.

Base URL
All API endpoints are relative to the following base URL: /api/v1
For example, the user registration endpoint is /api/v1/auth/register.

Overview
API Version: 1.0.0

Authentication: Uses JWT Bearer tokens for access and JWT refresh tokens (via HTTP-only cookies) for session renewal.

Authorization: Role-based access control ('admin', 'user'). Specific roles are required for certain endpoints.

Rate Limiting: Applied globally (60 requests per minute per IP). Exceeding the limit returns a 429 Too Many Requests error.

Input Validation: Uses express-validator. Invalid requests return detailed 400 Bad Request errors.

Content Format: Primarily JSON (application/json). File uploads use multipart/form-data.

Authentication
This API uses JSON Web Tokens (JWT) for securing endpoints. It employs a two-token strategy: an Access Token and a Refresh Token.

Access Token
Usage: Required for accessing protected API endpoints.

Format: Standard JWT.

Transmission: Must be included in the Authorization header of your request using the Bearer scheme.

Authorization: Bearer <your_access_token>

Lifetime: Access tokens have a predefined expiration time (configured on the server, e.g., 15 minutes). Once expired, you'll receive a 401 Unauthorized error.

Obtaining: Received upon successful registration (/auth/register) or login (/auth/login). Can be renewed using a valid Refresh Token (/auth/refresh-token).

Refresh Token
Usage: Used to obtain a new Access Token when the current one expires, without requiring the user to log in again.

Format: Standard JWT.

Transmission: Automatically handled via an HttpOnly, Secure (in production), SameSite=Strict cookie named refreshToken. You generally don't need to manage this token directly in your client-side code.

Lifetime: Refresh tokens have a longer expiration time (configured on the server, e.g., 7 days).

Obtaining: Set automatically as a cookie upon successful registration or login.

Invalidation: Deleted from the server and the cookie is cleared upon logout (/auth/logout).

Authentication Flow
Register or Login: Call /auth/register or /auth/login with valid credentials.
Receive an accessToken in the response body.
Receive a refreshToken set as an HttpOnly cookie.

Access Protected Resources: Make requests to other API endpoints, including the accessToken in the Authorization: Bearer <token> header.

Handle Expired Access Token: If a request returns a 401 Unauthorized error indicating an expired access token:
Call POST /auth/refresh-token. This endpoint uses the refreshToken cookie automatically sent by the browser.
Receive a new accessToken in the response.
Retry the original request with the new accessToken.

Handle Expired Refresh Token: If the /auth/refresh-token endpoint returns a 401 Unauthorized error, the refresh token has expired or is invalid. The user must log in again via /auth/login.

Logout: Call POST /auth/logout. This requires both the accessToken (in the header) and the refreshToken (in the cookie) to be valid. It invalidates the refresh token on the server and clears the cookie.


Rate Limiting
To ensure fair usage and protect the API from abuse, rate limiting is applied.

Limit: 60 requests per minute per IP address.

Headers: Standard rate limit headers (RateLimit-Limit, RateLimit-Remaining, RateLimit-Reset, Retry-After) are included in responses according to the IETF Draft standard.

Exceeding Limit: If you exceed the rate limit, you will receive an HTTP 429 Too Many Requests response. Check the Retry-After header to see when you can make requests again.

Example 429 Response:

HTTP/1.1 429 Too Many Requests
RateLimit-Limit: 60
RateLimit-Remaining: 0
RateLimit-Reset: 45  // Seconds until the limit resets
Retry-After: 45      // Seconds to wait before retrying
Content-Type: application/json

{
  "error": "You can only make 60 requests every minute."
}


Error Handling
The API uses standard HTTP status codes to indicate the success or failure of a request. Errors generally return a JSON body with code and message fields. Validation errors include an additional errors object.

Common Status Codes & Error Codes

Status Code
code Value(s)
Meaning

200 OK
N/A
Request successful.

201 Created
N/A
Resource created successfully.

204 No Content
N/A
Request successful, no response body needed (e.g., successful deletion).

400 Bad Request
ValidationError
Input validation failed (e.g., missing required field, invalid format). See errors object for details.

400 Bad Request
BadRequest
General bad request (e.g., trying to like an already liked blog).

401 Unauthorized
AuthenticationError
Missing, invalid, or expired accessToken or refreshToken. Check message for specifics.

403 Forbidden
AuthorizationError
User lacks permission (role) for the action, or attempting unauthorized admin registration.

404 Not Found
NotFound
The requested resource (user, blog, comment) could not be found.

413 Payload Too Large
ValidationError
Uploaded file exceeds the size limit (2MB for blog banners).

429 Too Many Requests
N/A
Rate limit exceeded (see Rate Limiting guide).

500 Internal Server Error
ServerError
An unexpected error occurred on the server. Contact support if this persists.

Error Response Format

General Error:

{
  "code": "NotFound",
  "message": "Blog not found"
}
Validation Error:

{
  "code": "ValidationError",
  "errors": {
    "email": {
      "type": "field",
      "value": "invalid-email",
      "msg": "Invalid email address",
      "path": "email",
      "location": "body"
    },
    "password": {
      "type": "field",
      "value": "short",
      "msg": "Password must be at least 8 characters long",
      "path": "password",
      "location": "body"
    }
  }
}